  showStartMenu();

  // --- Settings UI (API Key) ---
  try {
    // Add Settings button inside Start Menu options
    const btnSettings = document.createElement('button');
    btnSettings.id = 'btnSettings';
    btnSettings.textContent = '設定';
    btnSettings.title = '設定 (OpenAI API Keyなど)';
    const optionsEl = startMenu ? startMenu.querySelector('.options') : null;
    if (optionsEl) optionsEl.appendChild(btnSettings);

    // Build modal
    const settings = document.createElement('div');
    settings.id = 'settings';
    settings.className = 'start-menu';
    settings.style.display = 'none';
    settings.setAttribute('aria-modal', 'true');
    settings.setAttribute('role', 'dialog');
    settings.innerHTML = `
      <div class="panel">
        <h2>設定</h2>
        <div class="options" style="gap:12px; align-items:stretch">
          <label style="display:flex;flex-direction:column;gap:6px">
            <span>OpenAI API Key</span>
            <input id="inpApiKey" type="password" placeholder="sk-..." />
          </label>
          <label style="display:flex;flex-direction:column;gap:6px">
            <span>Model</span>
            <input id="inpModel" type="text" placeholder="gpt-4o-mini" />
          </label>
          <div style="display:flex; justify-content:flex-end; gap:8px; margin-top:8px">
            <button id="btnSettingsCancel">キャンセル</button>
            <button id="btnSettingsSave" class="primary">保存</button>
          </div>
        </div>
      </div>`;
    const stage = document.getElementById('stage') || document.body;
    stage.appendChild(settings);

    const inpApiKey = settings.querySelector('#inpApiKey');
    const inpModel = settings.querySelector('#inpModel');
    const btnSettingsCancel = settings.querySelector('#btnSettingsCancel');
    const btnSettingsSave = settings.querySelector('#btnSettingsSave');

    function loadSettings() {
      try {
        inpApiKey.value = localStorage.getItem('openai.apiKey') || '';
        inpModel.value = localStorage.getItem('openai.model') || 'gpt-4o-mini';
      } catch (_) {}
    }
    function openSettings() {
      loadSettings();
      // Hide start menu while editing settings
      try { startMenu.style.display = 'none'; } catch(_) {}
      settings.style.display = 'flex';
    }
    function closeSettings() {
      settings.style.display = 'none';
      // Return to start menu after closing settings
      try { showStartMenu(); } catch(_) {}
    }

    btnSettings?.addEventListener('click', openSettings);
    btnSettingsCancel?.addEventListener('click', closeSettings);
    btnSettingsSave?.addEventListener('click', () => {
      try {
        localStorage.setItem('openai.apiKey', inpApiKey.value.trim());
        localStorage.setItem('openai.model', inpModel.value.trim() || 'gpt-4o-mini');
      } catch (_) {}
      closeSettings();
    });

    // Keyboard shortcut: Ctrl+,
    window.addEventListener('keydown', (e) => {
      if ((e.ctrlKey || e.metaKey) && e.key === ',') { e.preventDefault(); openSettings(); }
      if (e.key === 'Escape' && settings.style.display !== 'none') { e.preventDefault(); closeSettings(); }
    });

    // If main process triggers settings:open, open here (preload bridge)
    if (window.api && typeof window.api.onOpenSettings === 'function') {
      window.api.onOpenSettings(() => openSettings());
    }
  } catch (e) { /* ignore UI errors */ }

